<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>isAlly = true; //is squad an ally
planesTakingOff = false; //is squad taking off
planesLanding = false; //is squad landing
landingQueued = false; //is squad queued for landing
escortQueued = false; //is squad queed for escort

canMove = true;
canEngage = true;
selected = false; //is squad selected by the user
hp = 0; //total hp of all members
maxhp = 0;

combatRole = 0;
squadNumber = -1;
squadSize = 6; //number of planes in squad
maxAmmo = 150*squadSize; //max amount of ammo
ammo = maxAmmo;
membersAlive = 6; //how many planes are active
planeType = noone;
baseEngageRange = 256;
engageRange = 256;
bombingRange = 64; //range of which bombers begin bombing run
engageSquad = undefined;
escortSquad = undefined;
takeOffFrom = undefined;
isEngaged = false; //is squad currently attacking enemy
speedMultiplier = 1;
dest_x = x;
dest_y = y;
ai_control = false; // is squad controled automatically

engagementArrowIndex = 0;
coordinate_queue = ds_list_create();

font = font_add_sprite(spr_squad_font,ord("!"),true,1);
alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>font_delete(font);
if (isAlly) {
    global.squad[squadNumber] = noone;
    global.squadDelayTime[squadNumber] = 60*(BASE_PLANE_ARMING_TIME);
}
ds_list_destroy(coordinate_queue);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (ai_control) {
    if (ammo &gt; 0) {
//        if (!planesTakingOff &amp;&amp; !planesLanding) {
            if (!isEngaged) {
                if (ds_list_size(coordinate_queue) &lt; 5*2) {
                    var xx = irandom(room_width);
                    var yy = irandom(room_height);
                    
                    ds_list_add(coordinate_queue,xx,yy);
                }
            }
        }
//    }
}
alarm[0] = 100;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (engageSquad != undefined) {
    if (!instance_exists(engageSquad)) {
        engageSquad = undefined;
    }
}
var membersDestroyed = 0;
for (var i = 0; i &lt; squadSize; i++) {
    if (!instance_exists(squadMember[i])) {
        membersDestroyed++;
    }
}
if (ammo &lt;= 0) {
    canEngage = false;
    isEngaged = false;
    escortSquad = undefined;
    engageSquad = undefined;
}
membersAlive = squadSize-membersDestroyed;
if (!planesTakingOff) {
    if (canEngage) {
        /* engage enemy */
        for (var i = 0; i &lt; instance_number(obj_squad); i++) {
            var enemy = instance_find(obj_squad,i);
            if (engageRange+enemy.engageRange &gt;= distance_to_object(enemy)) {
                if (isAlly != enemy.isAlly) {
                    alarm[0] = 300;
                    if (!isEngaged) {
                        isEngaged = true;
                        engageSquad = enemy;
                        assignEnemy(enemy);
                    }
                    else {
                        //enemy.x = var_wipe(enemy.x,x,100,0,1);
                        //enemy.y = var_wipe(enemy.y,y,100,0,1);
                        if (engageSquad != undefined) {
                            direction += sign(angle_difference(point_direction(x,y,engageSquad.x,engageSquad.y),direction));
                            if (distance_to_object(engageSquad) &gt; 64) {
                                speed = var_wipe(speed,1,100,0,0.5);
                                //print(string(id)+" moving towards "+string(engageSquad));
                            }
                            else {
                                speed = 0;
                            }
                        }
                    }
                }
            }
        }
    }
    var distToDest = point_distance(x,y,dest_x,dest_y);
    var angle = 0;
    /* change engagedment distance based on plane's location, if squad is in combat */
    if (isEngaged) {
        var maxDist = 0;
        if (combatRole == 0) {
            for (var i = 0; i &lt; squadSize; i++) {
                if (instance_exists(squadMember[i])) {
                    if (distance_to_object(squadMember[i]) &gt; maxDist) {
                        maxDist = distance_to_object(squadMember[i]);
                    }
                }
            }
        }
        else {
            angle = angle_difference(point_direction(x,y,dest_x,dest_y)+90,direction);
            for (var i = 0; i &lt; squadSize; i++) {
                if (instance_exists(squadMember[i])) {
                    squadMember[i].chaseTarget = escortSquad;
                }
            }
        }
        engageRange = maxDist;
        if (engageSquad == undefined) {
            isEngaged = false;
        }
    }
    else {
        /* squad is not engaging */
        engageRange = baseEngageRange;
        /* moving towards destination*/
        if (distToDest &lt; 96) {
            /* squad idling */
            angle = angle_difference(point_direction(x,y,dest_x,dest_y),direction);
            if (ds_list_size(coordinate_queue) &lt; 4) {
                if (landingQueued) {
                    landingQueued = false;
                    planesLanding = true;
                }
                if (ds_list_size(coordinate_queue) &lt; 2) {
                    angle = angle_difference(point_direction(x,y,dest_x,dest_y)+90,direction);
                    /* set bombers to attack */
                    if (escortSquad != undefined) {
                        if (combatRole != 0) {
                            if (ammo &gt; 0) {
                                isEngaged = true;
                            }
                        }
                    }
                }
            }
            speed = var_wipe(speed,1,100,0,0.2);
        }
        else {
            /* squad moving towards waypoint */
            angle = angle_difference(point_direction(x,y,dest_x,dest_y),direction)*2;
            speed = var_wipe(speed,1.5*speedMultiplier,100,0,0.2);
        }
    }
    direction += sign(angle);
    if (escortSquad == undefined) {
        if (distToDest &lt; 64) {
            if (planesLanding) {
                /* for planes to land */
                for (var i = 0; i &lt; squadSize; i++) {
                    if (instance_exists(squadMember[i])) {
                        squadMember[i].landing = true;
                    }
                }
            }
            if (distToDest &lt; 32) {
                if (ds_list_size(coordinate_queue) &gt;= 2) {
                    dest_x = ds_list_find_value(coordinate_queue,0);
                    dest_y = ds_list_find_value(coordinate_queue,1);
                    /* destination reached, removed current destination*/
                    ds_list_delete(coordinate_queue,0);
                    ds_list_delete(coordinate_queue,0);
                }
            }
        }
    }
    /* destroy squad when all memeber is destroyed */
    if (membersDestroyed == squadSize) {
        instance_destroy();
    }
}
if (escortSquad != undefined) {
    /* escorting squad */
    if (!instance_exists(escortSquad)) {escortSquad = undefined;}
    if (ds_exists(coordinate_queue,ds_type_list)) {ds_list_clear(coordinate_queue);}
    dest_x = escortSquad.x;
    dest_y = escortSquad.y;
}
if (isSquadSelected(squadNumber)) {selected = true;} else {selected = false;}
/* placing waypoints */
if (!ai_control &amp;&amp; isAlly) {
    if (selected) {
        var queueNewCoordinate = keyboard_check(vk_shift);
        if (mouse_check_button_pressed(mb_left)) {
            if (queueNewCoordinate) {
                /* queue new waypoint */
                ds_list_add(coordinate_queue,mouse_x,mouse_y);
            }
            else {
                /* set new waypoint */
                dest_x = mouse_x;
                dest_y = mouse_y;
                ds_list_clear(coordinate_queue);
            }
            planesLanding = false;
            landingQueued = false;
            engageTarget = undefined;
        }
        if (keyboard_check_pressed(ord("F"))) {
            /* land squad */
            landSquad(queueNewCoordinate);
        }
    }
}
if (!selected) {
    /* set selected squad to perform action on other squads */
    for (var i = 0; i &lt; MAX_SQUADS; i++) {
        var s = global.squad[i];
        if (s != noone) {
            if (s.selected) {
                var clickRange = 64;
                if (mouse_check_button_pressed(mb_left)) {
                    if (inSquare(mouse_x,mouse_y,x-clickRange,y-clickRange,x+clickRange,y+clickRange)) {
                        ds_list_clear(coordinate_queue);
                        s.escortSquad = id;
                    }
                    else {
                        s.escortSquad = undefined;
                    }
                }
            }
        }
    }
}
if (!canMove) {
    speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var colour = green;
if (!isAlly) {colour = red;}
engagementArrowIndex = (++engagementArrowIndex) mod 80;
var dir = 0;
/* Draw waypoint arrow */
if(selected) {
    if (isEngaged) {
        if (engageSquad != undefined) {
            if (instance_exists(engageSquad)) {
                var dist = point_distance((x-view_xview[0])*windowRatio_x,(y-view_yview[0])*windowRatio_y,(engageSquad.x-view_xview[0])*windowRatio_x,(engageSquad.y-view_yview[0])*windowRatio_y);
                if (combatRole == 0) {
                    if (engageSquad.engageSquad == id) {dist /= 2;}
                }
                for (var i = dist; i &gt;= 8; i-= 8) {
                    dir = point_direction((x-view_xview[0])*windowRatio_x,(y-view_yview[0])*windowRatio_y,(engageSquad.x-view_xview[0])*windowRatio_x,(engageSquad.y-view_yview[0])*windowRatio_y);
                    draw_sprite_ext(spr_engagement_arrow,engagementArrowIndex,((x-view_xview[0])*windowRatio_x)+lengthdir_x(i,dir),((y-view_yview[0])*windowRatio_y)+lengthdir_y(i,dir),1,1,dir,colour,1);
                }
            }
        }
    }
    else {
        if (isAlly) {
            for (var i = point_distance((x-view_xview[0])*windowRatio_x,(y-view_yview[0])*windowRatio_y,(dest_x-view_xview[0])*windowRatio_x,(dest_y-view_yview[0])*windowRatio_y); i &gt;= 8; i-= 8) {
                dir = point_direction((x-view_xview[0])*windowRatio_x,(y-view_yview[0])*windowRatio_y,(dest_x-view_xview[0])*windowRatio_x,(dest_y-view_yview[0])*windowRatio_y);
                draw_sprite_ext(spr_engagement_arrow,engagementArrowIndex,((x-view_xview[0])*windowRatio_x)+lengthdir_x(i,dir),((y-view_yview[0])*windowRatio_y)+lengthdir_y(i,dir),1,1,dir,colour,1);
            }
            draw_circle_colour((dest_x-view_xview[0])*windowRatio_x,(dest_y-view_yview[0])*windowRatio_y,4,colour,colour,false);
            if (ds_list_size(coordinate_queue) div 2 &gt; 0) {
                for (var i = point_distance((dest_x-view_xview[0])*windowRatio_x,(dest_y-view_yview[0])*windowRatio_y,(ds_list_find_value(coordinate_queue,0)-view_xview[0])*windowRatio_x,(ds_list_find_value(coordinate_queue,1)-view_yview[0])*windowRatio_y); i &gt;= 8; i-= 8) {
                    dir = point_direction((dest_x-view_xview[0])*windowRatio_x,(dest_y-view_yview[0])*windowRatio_y,(ds_list_find_value(coordinate_queue,0)-view_xview[0])*windowRatio_x,(ds_list_find_value(coordinate_queue,1)-view_yview[0])*windowRatio_y);
                    draw_sprite_ext(spr_engagement_arrow,engagementArrowIndex,((dest_x-view_xview[0])*windowRatio_x)+lengthdir_x(i,dir),((dest_y-view_yview[0])*windowRatio_y)+lengthdir_y(i,dir),1,1,dir,colour,1);
                }
                draw_circle_colour((ds_list_find_value(coordinate_queue,0)-view_xview[0])*windowRatio_x,(ds_list_find_value(coordinate_queue,1)-view_yview[0])*windowRatio_y,4,colour,colour,false);
                for (var j = 0; j &lt; ds_list_size(coordinate_queue)-2; j += 2) {
                    var xfrom = (ds_list_find_value(coordinate_queue,j)-view_xview[0])*windowRatio_x;
                    var yfrom = (ds_list_find_value(coordinate_queue,j+1)-view_yview[0])*windowRatio_y;
                    var xto = (ds_list_find_value(coordinate_queue,j+2)-view_xview[0])*windowRatio_x;
                    var yto = (ds_list_find_value(coordinate_queue,j+3)-view_yview[0])*windowRatio_y;
                    //draw_text(xfrom,yfrom,string(xfrom)+","+string(yfrom));
                    //draw_text(xfrom+lengthdir_x(dist,d),yfrom+lengthdir_y(dist,d),string(xfrom+lengthdir_x(dist,d))+","+string(yfrom+lengthdir_y(dist,d)));
                    draw_circle_colour(xfrom,yfrom,4,colour,colour,false);
                    draw_circle_colour(xto,yto,4,colour,colour,false);
                    for (var i = point_distance(xfrom,yfrom,xto,yto)-4; i &gt;= 4; i -= 8) {
                        /* draw line */
                        dir = point_direction(xfrom,yfrom,xto,yto);
                        draw_sprite_ext(spr_engagement_arrow,engagementArrowIndex,xfrom+lengthdir_x(i,dir),yfrom+lengthdir_y(i,dir),1,1,dir,colour,1);
                    }
                }
            }
        }
    }
}
var iconDirection = direction;
if (isEngaged &amp;&amp; (engageSquad != undefined)) {
    if (instance_exists(engageSquad)) {
        iconDirection = point_direction(x,y,engageSquad.x,engageSquad.y);
    }
}
draw_sprite_ext(spr_target_icon,selected,(x-view_xview[0])*windowRatio_x,(y-view_yview[0])*windowRatio_y,1,1,0,colour,1);
draw_sprite(spr_ammo,0,((x-view_xview[0])*windowRatio_x)-20,((y-view_yview[0])*windowRatio_y)+12);
draw_sprite_part_ext(spr_ammo,1,0,0,(ceil(ammo/round(maxAmmo/8)))*5,10,((x-view_xview[0])*windowRatio_x)-20,((y-view_yview[0])*windowRatio_y)+12,1,1,colour,1);
var statusImage = -1;
if (planesTakingOff) {
    statusImage = spr_squad_take_off;
}
else if (planesLanding) {
    statusImage = spr_squad_landing;
}
else if (isEngaged) {
    statusImage = spr_squad_engaging;
}
else if (escortSquad != undefined) {
    if (escortSquad.isAlly) {
        statusImage = spr_squad_escort;
    }
}
if (statusImage != -1) {
    draw_sprite_ext(statusImage,-1,(x-view_xview[0])*windowRatio_x,(y-view_yview[0])*windowRatio_y,1,1,0,colour,1);
}
draw_sprite_ext(spr_squad_number,squadNumber,(x-view_xview[0])*windowRatio_x,(y-view_yview[0])*windowRatio_y,1,1,0,colour,1);
draw_set_font(font);
draw_set_valign(fa_bottom);
draw_set_halign(fa_middle);
hp = 0;
maxhp = 0;
for (var i = 0; i &lt; squadSize; i++) {
    if (instance_exists(squadMember[i])) {
        hp += squadMember[i].hp;
        maxhp = squadMember[i].maxhp*squadSize;
    }
}
draw_text_colour((x-view_xview[0])*windowRatio_x,((y-view_yview[0])*windowRatio_y)-20,string(membersAlive)+"/"+string(squadSize),colour,colour,colour,colour,1);
draw_sprite(spr_squad_hp_bar,0,((x-view_xview[0])*windowRatio_x)-20,((y-view_yview[0])*windowRatio_y)-18);
draw_sprite_part_ext(spr_squad_hp_bar,1,0,0,(hp/maxhp)*40,5,((x-view_xview[0])*windowRatio_x)-20,((y-view_yview[0])*windowRatio_y)-18,1,1,colour,1);
//draw_circle_colour(x,y,engageRange,colour,colour,true);
//draw_text_colour(x,y-10,string(membersAlive)+"/"+string(squadSize),colour,colour,colour,colour,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
