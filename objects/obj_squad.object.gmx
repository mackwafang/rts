<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_target_icon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>isAlly = true; //is squad an ally
planesTakingOff = false; //is squad taking off
planesLanding = false; //is squad landing
landingQueued = false; //is squad queued for landing
escortQueued = false; //is squad queed for escort

canMove = true;
canEngage = true;
selected = false; //is squad selected by the user
hp = 0; //total hp of all members
maxhp = 0;

combatRole = 0;
squadNumber = -1;
squadSize = 6; //number of planes in squad
squadMember = ds_list_create();
maxAmmo = 250*squadSize; //max amount of ammo
ammo = maxAmmo;
membersAlive = 6; //how many planes are active
membersShotDown = 0; //how many planes are shot down by the enemy
planeType = noone;
baseEngageRange = 256;
engageRange = 256;
bombingRange = 64; //range of which bombers begin bombing run
engageSquad = noone;
escortSquad = noone;
takeOffFrom = noone;
isEngaged = false; //is squad currently attacking enemy
isIdling = false;
speedMultiplier = 1;
dest_x = x;
dest_y = y;
ai_control = false; // is squad controled automatically

engagementArrowIndex = 0;
coordinate_queue = ds_list_create();
statusIconSwitchTimer = 0;

statusImage = 0; /* used for drawing icons */
subImage = -1; /* used for drawing icons */

font = font_add_sprite(spr_squad_font,ord("!"),true,1);
alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>font_delete(font);
if (isAlly) {
    global.squad[squadNumber] = noone;
    //global.squadDelayTime[squadNumber] = global.squadInitDelayTime[squadNumber];
    global.squadDelayTime[squadNumber] = global.squadInitDelayTime[squadNumber];
    if (membersShotDown &gt; 0) {
        var time = 0;
        switch(planeType) {
            case 1:
                time = FR_ARMING_TIME;
                break;
            case 2:
                time = DB_ARMING_TIME;
                break;
            case 3:
                time = TB_ARMING_TIME;
                break;
        }
        global.squadDelayTime[squadNumber] += round(time*membersShotDown)*60;
    }
}
ds_list_destroy(coordinate_queue);
ds_list_destroy(squadMember);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (ai_control) {
    if (ammo &gt; 0) {
//        if (!planesTakingOff &amp;&amp; !planesLanding) {
            if (!isEngaged) {
                if (ds_list_size(coordinate_queue) &lt; 5*2) {
                    var xx = irandom(room_width);
                    var yy = irandom(room_height);
                    
                    ds_list_add(coordinate_queue,xx,yy);
                }
            }
        }
//    }
}
alarm[0] = 100;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!instance_exists(engageSquad)) {
    engageSquad = noone;
    isEngaged = false;
}
var membersDestroyed = 0;
for (var i = 0; i &lt; squadSize; i++) {
    if (squadMember[| i] == undefined) {
        membersDestroyed++;
    }
}
if (ammo &lt;= 0) {
    canEngage = false;
    isEngaged = false;
    escortSquad = noone;
    engageSquad = noone;
}
membersAlive = squadSize-membersDestroyed;
if (!planesTakingOff) {
    if (canEngage) {
        /* engage enemy */
        if (!planesLanding) {
            for (var i = 0; i &lt; instance_number(obj_squad); i++) {
                var enemy = instance_find(obj_squad,i);
                if (engageRange+enemy.engageRange &gt;= distance_to_object(enemy)) {
                    if (isAlly != enemy.isAlly) {
                        if (!enemy.planesTakingOff) {
                            alarm[0] = 300;
                            if (!isEngaged) {
                                isEngaged = true;
                                engageSquad = enemy;
                                assignEnemy(enemy);
                            }
                            else {
                               if (instance_exists(engageSquad)) {
                                    direction += sign(angle_difference(point_direction(x,y,engageSquad.x,engageSquad.y),direction));
                                    if (distance_to_object(engageSquad) &gt; 64) {
                                        speed = var_wipe(speed,1,100,0,0.5);
                                        //print(string(id)+" moving towards "+string(engageSquad));
                                    }
                                    else {
                                        speed = 0;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    var distToDest = point_distance(x,y,dest_x,dest_y);
    var angle = 0;
    /* change engagedment distance based on plane's location, if squad is in combat */
    if (isEngaged) {
        var maxDist = 0;
        if (combatRole == 0) {
            for (var i = 0; i &lt; squadSize; i++) {
                if (squadMember[| i] != undefined) {
                    if (distance_to_object(squadMember[| i]) &gt; maxDist) {
                        maxDist = distance_to_object(squadMember[| i]);
                    }
                }
            }
        }
        else {
            angle = angle_difference(point_direction(x,y,dest_x,dest_y),direction);
            for (var i = 0; i &lt; squadSize; i++) {
                if (squadMember[| i] != undefined) {
                    squadMember[| i].chaseTarget = escortSquad;
                    squadMember[| i].isEngaged = true;
                }
            }
        }
        engageRange = maxDist;
        if (!instance_exists(engageSquad)) {
            isEngaged = false;
        }
    }
    else {
        /* squad is not engaging */
        isIdling = false;
        engageRange = baseEngageRange;
        speed = var_wipe(speed,2*speedMultiplier,100,0,0.2);
        var adjustedEngageRange = 0;
        if (ds_list_size(coordinate_queue) &gt; 0) {
            adjustedEngageRange = -100;
        }
        switch(planeType) {
            case obj_ally_bomber:
                if (instance_exists(escortSquad)) {
                    if (object_get_parent(escortSquad.object_index) == obj_bomb_target) {
                        adjustedEngageRange = 128;
                    }
                }
                break;
            case obj_ally_torp_bomber:
                if (instance_exists(escortSquad)) {
                    if (object_get_parent(escortSquad.object_index) == obj_bomb_target) {
                        adjustedEngageRange = 256;
                    }
                }
                break;
        }
        /* moving towards destination*/
        if (distToDest &lt; 128+adjustedEngageRange) {
            /* squad idling */
            angle = angle_difference(point_direction(x,y,dest_x,dest_y),direction);
            if (planesLanding) {
                /* for planes to land */
                for (var i = 0; i &lt; ds_list_size(squadMember); i++) {
                    if (squadMember[| i] != undefined) {
                        squadMember[| i].landing = true;
                    }
                }
            }
            if (ds_list_size(coordinate_queue) &lt; 2) {
                angle = angle_difference(point_direction(x,y,dest_x,dest_y)+90,direction);
                isIdling = true;
                if (landingQueued) {
                    landingQueued = false;
                    planesLanding = true;
                }
                /* set bombers to attack */
                if (instance_exists(escortSquad)) {
                    if (object_get_parent(escortSquad.object_index) == obj_bomb_target) {
                        if (combatRole != 0) {
                            if (ammo &gt; 0) {
                                isEngaged = true;
                            }
                        }
                    }
                }
                speed = var_wipe(speed,1*speedMultiplier,100,0,0.2);
            }
            else {
                dest_x = ds_list_find_value(coordinate_queue,0);
                dest_y = ds_list_find_value(coordinate_queue,1);
                /* destination reached, removed current destination*/
                ds_list_delete(coordinate_queue,0);
                ds_list_delete(coordinate_queue,0);
            }
        }
        else {
            /* squad moving towards waypoint */
            angle = angle_difference(point_direction(x,y,dest_x,dest_y),direction);
        }
    }
    direction += sign(angle)*2;
    var allDestroyed = true;
    for (var i = 0; i &lt; squadSize; i++) {
        if (squadMember[| i] != undefined) {
            allDestroyed = false;
            break;
        }
    }
    if (allDestroyed) {instance_destroy();}
}
if (instance_exists(escortSquad)) {
    /* escorting squad */
    //if (ds_exists(coordinate_queue,ds_type_list)) {ds_list_clear(coordinate_queue);}
    dest_x = escortSquad.x;
    dest_y = escortSquad.y;
}
if (isSquadSelected(squadNumber)) {selected = true;} else {selected = false;}
/* placing waypoints */
if (!ai_control &amp;&amp; isAlly) {
    if (selected) {
        var queueNewCoordinate = keyboard_check(vk_shift);
        if (keyboard_check_pressed(ord("F"))) {
            /* land squad */
            landSquad(queueNewCoordinate);
        }
        /* set selected squad to perform action on other squads */
        if (mouse_check_button_pressed(mb_left)) {
            if (queueNewCoordinate) {
                /* queue new waypoint */
                ds_list_add(coordinate_queue,mouse_x,mouse_y);
            }
            else {
                /* set new waypoint */     
                dest_x = mouse_x;
                dest_y = mouse_y;
                ds_list_clear(coordinate_queue);
                for (var i = 0; i &lt; instance_count; i++) {
                    var obj = instance_id[i];
                    if (obj != noone) {
                        if (instance_exists(obj)) {
                            var clickRange_x1 = obj.sprite_xoffset;
                            var clickRange_y1 = obj.sprite_yoffset;
                            var clickRange_x2 = obj.sprite_width-obj.sprite_xoffset;
                            var clickRange_y2 = obj.sprite_height-obj.sprite_xoffset;
                            if (place_meeting(mouse_x,mouse_y,obj)) {//if (inSquare(mouse_x,mouse_y,obj.x-clickRange_x1,obj.y-clickRange_y1,obj.x+clickRange_x2,obj.y+clickRange_y2)) {
                                ds_list_clear(coordinate_queue);
                                switch(obj.object_index) {
                                    case obj_squad:
                                        if ((obj.isAlly == isAlly) || combatRole == 0) {
                                            escortSquad = obj;
                                        }
                                        break;
                                    case obj_runway: case obj_installation:
                                        if (object_get_parent(obj.object_index) == obj_bomb_target) {
                                            if (combatRole != 0 &amp;&amp; obj.isAlly != isAlly) {
                                                escortSquad = obj;
                                                engageSquad = obj;
                                            }
                                        }
                                        break;
                                }
                                break;
                            }
                            else {
                                escortSquad = noone;
                                if (combatRole != 0) {
                                    engageSquad = noone;
                                }
                            }
                        }
                    }
                }
            }
            planesLanding = false;
            landingQueued = false;
        }
    }
}
if (!canMove) {
    speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var colour = green;
if (!isAlly) {colour = red;}
engagementArrowIndex = (++engagementArrowIndex) mod 80;
var dir = 0;
/* Draw waypoint arrow */
if(selected) {
    if (instance_exists(engageSquad)) {
        if (instance_exists(engageSquad)) {
            var dist = point_distance((x-view_xview[0])*windowRatio_x,(y-view_yview[0])*windowRatio_y,(engageSquad.x-view_xview[0])*windowRatio_x,(engageSquad.y-view_yview[0])*windowRatio_y);
            if (combatRole == 0) {
                if (engageSquad.engageSquad == id) {dist /= 2;}
            }
            for (var i = dist; i &gt;= 8; i-= 8) {
                dir = point_direction((x-view_xview[0])*windowRatio_x,(y-view_yview[0])*windowRatio_y,(engageSquad.x-view_xview[0])*windowRatio_x,(engageSquad.y-view_yview[0])*windowRatio_y);
                draw_sprite_ext(spr_engagement_arrow,engagementArrowIndex,((x-view_xview[0])*windowRatio_x)+lengthdir_x(i,dir),((y-view_yview[0])*windowRatio_y)+lengthdir_y(i,dir),1,1,dir,colour,1);
            }
        }
    }
    if (isAlly) {
        for (var i = point_distance((x-view_xview[0])*windowRatio_x,(y-view_yview[0])*windowRatio_y,(dest_x-view_xview[0])*windowRatio_x,(dest_y-view_yview[0])*windowRatio_y); i &gt;= 8; i-= 8) {
            dir = point_direction((x-view_xview[0])*windowRatio_x,(y-view_yview[0])*windowRatio_y,(dest_x-view_xview[0])*windowRatio_x,(dest_y-view_yview[0])*windowRatio_y);
            draw_sprite_ext(spr_engagement_arrow,engagementArrowIndex,((x-view_xview[0])*windowRatio_x)+lengthdir_x(i,dir),((y-view_yview[0])*windowRatio_y)+lengthdir_y(i,dir),1,1,dir,colour,1);
        }
        draw_circle_colour((dest_x-view_xview[0])*windowRatio_x,(dest_y-view_yview[0])*windowRatio_y,4,colour,colour,false);
        if (ds_list_size(coordinate_queue) div 2 &gt; 0) {
            for (var i = point_distance((dest_x-view_xview[0])*windowRatio_x,(dest_y-view_yview[0])*windowRatio_y,(ds_list_find_value(coordinate_queue,0)-view_xview[0])*windowRatio_x,(ds_list_find_value(coordinate_queue,1)-view_yview[0])*windowRatio_y); i &gt;= 8; i-= 8) {
                dir = point_direction((dest_x-view_xview[0])*windowRatio_x,(dest_y-view_yview[0])*windowRatio_y,(ds_list_find_value(coordinate_queue,0)-view_xview[0])*windowRatio_x,(ds_list_find_value(coordinate_queue,1)-view_yview[0])*windowRatio_y);
                draw_sprite_ext(spr_engagement_arrow,engagementArrowIndex,((dest_x-view_xview[0])*windowRatio_x)+lengthdir_x(i,dir),((dest_y-view_yview[0])*windowRatio_y)+lengthdir_y(i,dir),1,1,dir,colour,1);
            }
            draw_circle_colour((ds_list_find_value(coordinate_queue,0)-view_xview[0])*windowRatio_x,(ds_list_find_value(coordinate_queue,1)-view_yview[0])*windowRatio_y,4,colour,colour,false);
            for (var j = 0; j &lt; ds_list_size(coordinate_queue)-2; j += 2) {
                var xfrom = (ds_list_find_value(coordinate_queue,j)-view_xview[0])*windowRatio_x;
                var yfrom = (ds_list_find_value(coordinate_queue,j+1)-view_yview[0])*windowRatio_y;
                var xto = (ds_list_find_value(coordinate_queue,j+2)-view_xview[0])*windowRatio_x;
                var yto = (ds_list_find_value(coordinate_queue,j+3)-view_yview[0])*windowRatio_y;
                //draw_text(xfrom,yfrom,string(xfrom)+","+string(yfrom));
                //draw_text(xfrom+lengthdir_x(dist,d),yfrom+lengthdir_y(dist,d),string(xfrom+lengthdir_x(dist,d))+","+string(yfrom+lengthdir_y(dist,d)));
                draw_circle_colour(xfrom,yfrom,4,colour,colour,false);
                draw_circle_colour(xto,yto,4,colour,colour,false);
                for (var i = point_distance(xfrom,yfrom,xto,yto)-4; i &gt;= 4; i -= 8) {
                    /* draw line */
                    dir = point_direction(xfrom,yfrom,xto,yto);
                    draw_sprite_ext(spr_engagement_arrow,engagementArrowIndex,xfrom+lengthdir_x(i,dir),yfrom+lengthdir_y(i,dir),1,1,dir,colour,1);
                }
            }
        }
    }
}
var iconDirection = direction;
if (isEngaged &amp;&amp; instance_exists(engageSquad)) {
    if (instance_exists(engageSquad)) {
        iconDirection = point_direction(x,y,engageSquad.x,engageSquad.y);
    }
}
draw_sprite_ext(spr_target_icon,selected,(x-view_xview[0])*windowRatio_x,(y-view_yview[0])*windowRatio_y,1,1,0,colour,1);
draw_sprite(spr_ammo,2*combatRole,((x-view_xview[0])*windowRatio_x)-20,((y-view_yview[0])*windowRatio_y)+12);
draw_sprite_part_ext(spr_ammo,(2*combatRole)+1,0,0,(ceil(ammo/round(maxAmmo/8)))*5,10,((x-view_xview[0])*windowRatio_x)-20,((y-view_yview[0])*windowRatio_y)+12,1,1,colour,1);
if (planesTakingOff) {
    statusImage = spr_squad_take_off;
}
else if (planesLanding) {
    statusImage = spr_squad_landing;
}
else if (isEngaged) {
    switch(combatRole) {
        case 0:
            statusImage = spr_squad_engaging_fighter;
            break;
        case 1: case 2:
            statusImage = spr_squad_engaging_bomber;
            break;
    }
}
else if (instance_exists(escortSquad)) {
    if (escortSquad.isAlly) {
        statusImage = spr_squad_escort;
    }
    else {
        statusImage = spr_squad_engaging;
    }
}
else {
    statusImage = spr_target;
}
statusIconSwitchTimer = ++statusIconSwitchTimer mod 240;
switch (statusIconSwitchTimer div 120) {
    case 0:
        draw_sprite_ext(spr_squad_number,squadNumber,(x-view_xview[0])*windowRatio_x,((y-view_yview[0])*windowRatio_y),1,1,0,colour,1);
        break;
    case 1:
        if (isEngaged &amp;&amp; instance_exists(escortSquad)) {
            subImage = -1;
        }
        else if (statusImage == spr_target) {
            subImage = combatRole;
        }
        draw_sprite_ext(statusImage,subImage,(x-view_xview[0])*windowRatio_x,(y-view_yview[0])*windowRatio_y,1,1,0,colour,1);
        break;
}
draw_set_font(font);
draw_set_valign(fa_bottom);
draw_set_halign(fa_middle);
hp = 0;
maxhp = 0;
for (var i = 0; i &lt; ds_list_size(squadMember); i++) {
    if (squadMember[| i] != undefined) {
        hp += squadMember[| i].hp;
        maxhp = squadMember[| i].maxhp*squadSize;
    }
}
draw_text_colour((x-view_xview[0])*windowRatio_x,((y-view_yview[0])*windowRatio_y)-20,string(membersAlive)+"/"+string(squadSize),colour,colour,colour,colour,1);
draw_sprite(spr_squad_hp_bar,0,((x-view_xview[0])*windowRatio_x)-20,((y-view_yview[0])*windowRatio_y)-18);
draw_sprite_part_ext(spr_squad_hp_bar,1,0,0,(hp/maxhp)*40,5,((x-view_xview[0])*windowRatio_x)-20,((y-view_yview[0])*windowRatio_y)-18,1,1,colour,1);
//draw_circle_colour(x,y,engageRange,colour,colour,true);
//draw_text_colour(x,y-10,string(membersAlive)+"/"+string(squadSize),colour,colour,colour,colour,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
