<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_runway</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>900</depth>
  <persistent>0</persistent>
  <parentName>obj_bomb_target</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>isAlly = true; //is runway part of player?
takeOff = false;
landing = false;
isDestroyed = false;

planesRequired = 0; //number of planes required to send out or take in
squadQueue = ds_queue_create();
useTime = 0; //takeoff/landing time
sendPlaneToSquad = undefined;
maxUseTime = 30;
event_inherited();
isInstallation = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_queue_destroy(squadQueue);
if (sendPlaneToSquad != undefined) {
    instance_destroy(sendPlaneToSquad);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
image_angle = direction;
/* take off */
if (!isDestroyed) {
    if (takeOff) {
        if (useTime &lt; 0) {
            if (planesRequired &gt; 0) {
                var canSend = false;
                if (isAlly) {
                    if (global.squadDelayTime[sendPlaneToSquad.squadNumber] &lt;= 0) {
                        canSend = true;
                    }
                }
                else {
                    canSend = true;
                }
                if (canSend) {
                    sendPlaneToSquad.squadMember[sendPlaneToSquad.squadSize-planesRequired] = createPlane(x,y,direction,sendPlaneToSquad.planeType,sendPlaneToSquad,sendPlaneToSquad.isAlly,id,sendPlaneToSquad.squadSize-planesRequired);
                    with(sendPlaneToSquad) {
                        if (isEngaged) {
                            if (instance_exists(engageSquad)) {
                                assignEnemy(engageSquad);
                            }
                        }
                    }
                    print("sending out an aircraft, "+string(planesRequired)+" planes left");
                    planesRequired--;
                    useTime = maxUseTime;
                    if (sendPlaneToSquad.squadSize-planesRequired &lt; 6) {
                        sendPlaneToSquad.speed = min(sendPlaneToSquad.speed+0.25,6);
                    }
                    else {
                        sendPlaneToSquad.speed = max(sendPlaneToSquad.speed-0.25,0);
                    }
                    sendPlaneToSquad.direction = image_angle;
                }
                else {
                    ds_queue_enqueue(squadQueue,sendPlaneToSquad);
                    sendPlaneToSquad = ds_queue_dequeue(squadQueue);
                    planeType = sendPlaneToSquad.planeType;
                    planesRequired = sendPlaneToSquad.squadSize;
                    sendPlaneToSquad.visible = true;
                }
            }
            else {
                var allTookOff = false;
                if (sendPlaneToSquad != undefined) {
                    var planesTakenOff = 0;
                    for (var i = 0; i &lt; sendPlaneToSquad.squadSize; i++) {
                        var p = sendPlaneToSquad.squadMember[i];
                        if (p != undefined) {
                            if (instance_exists(p)) {
                                if (!p.takeOff) {
                                    planesTakenOff++;
                                }
                            }
                        }
                    }
                    if (planesTakenOff == sendPlaneToSquad.membersAlive) {allTookOff = true;}
                } else {allTookOff = true;}
                if (allTookOff) {
                    if (sendPlaneToSquad != undefined) {
                        if (instance_exists(sendPlaneToSquad)) {
                            sendPlaneToSquad.planesTakingOff = false;
                        }
                    }
                    if (ds_queue_size(squadQueue) &gt; 0) {
                        //sending planes for next squad in line
                        sendPlaneToSquad = ds_queue_dequeue(squadQueue);
                        planeType = sendPlaneToSquad.planeType;
                        planesRequired = sendPlaneToSquad.squadSize;
                        sendPlaneToSquad.visible = true;
                    }
                    else {
                        takeOff = false; //runway is now free
                        sendPlaneToSquad = undefined;
                    }
                }
            }
        }
        else {
            useTime--;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
