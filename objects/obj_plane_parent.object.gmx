<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canMove = true;
canShoot = true;
isAlly = true; // is plane an ally
takeOff = false; // plane is attempting taking off
landing = false; // plane is attempting to land
isLandingInProgress = false; // plane is in process of landing
idling_x = 0; //use when plane is idling/moving towards waypoint
idling_y = 0; //use when plane is idling/moving towards waypoint
attacking_x = 0; // use for random attacking coordinate, bombers only
attacking_y = 0; // use for random attacking coordinate, bombers only
takeOffFrom = noone;

baseMoveSpeed = 4;
planeId = -1;
moveSpeed = 4;
combatRole = 0; //role of plane, 0 = fighter, 1 = torp. bomber, 2 = dive bomber
turnRateCof = 1; //turn rate coefficient
fireRate = 7; //fire rate
maxhp = 50;
hp = maxhp;
attack = 2;
damage = 0;
bombsDropped = false;

chaseTarget = noone; //object for go after (object id)
assignedSquad = noone; //the assigned squad (object id)
engageSquad = noone; // the squad that is engaged
chooseSide = choose(-1,1);
isEngaged = false; //is plane engaged in combat
maxEngageRange = 256; // must engage within this range

fovRange = 256;
fovAngle = 10;
idleSide = 1; //the side to go when plane is idling

propellerIndex = 0;
planeImageIndex = image_number/2;
image_index = planeImageIndex;
fire = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_delete(assignedSquad.squadMember,ds_list_find_index(assignedSquad.squadMember,id));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
if (hp &lt; maxhp*0.4) {
    hp -= (maxhp*0.001);
    part_particles_create(global.fireParticleSystem,x+irandom_range(-1,1),y+irandom_range(-1,1),global.fireParticleType,2);
}
/* dies */
if (hp &lt;= 0) {
    explosionEffect();
    if (instance_exists(assignedSquad)) {
        if (combatRole != 0) {assignedSquad.ammo -= ceil(assignedSquad.maxAmmo/assignedSquad.squadSize);}
        assignedSquad.membersShotDown++;
    }
    instance_destroy();
}
if (assignedSquad == noone) {instance_destroy();}
idling_x = (2-((planeId+1) div 2))*32;
idling_y = ((planeId+1) div 2)*power(-1,planeId mod 2)*32;
planeId = ds_list_find_index(assignedSquad.squadMember,id);
/* chasing target */
var turnRate = 0;
if ((!takeOff &amp;&amp; !landing)) {
    var withinSquadRange = false; //used for adjusting speed of plane when it's near squad icon
    var addTurnRate = 1;
    if (combatRole != 0) {
        if (inViewRangeAny(obj_enemy_plane,45,256,self,true)) {
            /* Bomber self-defense combat */
            if (fire &gt; 0) {
                fire -= fireRate;
                var nearest = instance_nearest(x,y,obj_enemy_plane);
                var shootAngle = predictedAim(point_direction(x,y,nearest.x,nearest.y),nearest,10,2,2);
                if (nearest != noone) {
                    shootBullet(x,y,10,shootAngle,1);
                }
            }
        }
    }
    if (isEngaged) {
        // plane is engaged in combat
        moveSpeed = baseMoveSpeed;
        if (chaseTarget != undefined) {
            var desiredAngle = direction;
            var objectInRange = false;
            if (combatRole != 0) {
                var target = assignedSquad.escortSquad;
                if (target != noone) {
                    if ((attacking_x == 0) &amp;&amp; (attacking_y == 0)) {
                        attacking_x = irandom((min(target.sprite_height,target.sprite_width)*0.85) div 2)*choose(-1,1);
                        attacking_y = irandom((min(target.sprite_height,target.sprite_width)*0.85) div 2)*choose(-1,1);
                    }
                    objectInRange = (point_distance(x,y,target.x+attacking_x,target.y+attacking_y) &lt; fovRange);
                }
                desiredAngle = point_direction(x,y,target.x+attacking_x,target.y+attacking_y);
            }
            else {
                desiredAngle = predictedAim(direction,chaseTarget,20);
            }
            if (turnary(combatRole == 0,inViewRangeAny(chaseTarget,fovAngle,fovRange),objectInRange)) {
                /* shoot when in range */
                //if (chaseTarget.object_index != obj_squad) {
                    chaseTimer = 0;
                    if (assignedSquad.ammo &gt; 0) {
                        switch(combatRole) {
                            case 0:
                                /* Air v Air combat */
                                if (chaseTarget != assignedSquad) {
                                    if (fire &gt; 0) {
                                        fire -= fireRate;
                                        assignedSquad.ammo -= 1;
                                        var dist = point_distance(x,y,x,y+6);
                                        var dir = image_angle+point_direction(x,y,x,y+6);
                                        shootBullet(x+lengthdir_x(dist,dir),y+lengthdir_y(dist,dir),20,direction,attack);
                                        
                                        var dist = point_distance(x,y,x,y-6);
                                        var dir = image_angle+point_direction(x,y,x,y-6);
                                        shootBullet(x+lengthdir_x(dist,dir),y+lengthdir_y(dist,dir),20,direction,attack);
                                    }
                                }
                                break;
                            case 1: case 2:
                                /* Air v Ground (torpedo bomber) combat */
                                if (!bombsDropped) {
                                    bombsDropped = true;
                                    assignedSquad.ammo -= ceil(assignedSquad.maxAmmo/assignedSquad.squadSize)+1;
                                    if (combatRole == 1) { 
                                        dropTorpedo(x,y,1,image_angle,attack,20);
                                    }
                                    else {
                                        dropBomb(x,y,1,image_angle,attack,0.6);
                                    }
                                    if (assignedSquad.ammo &lt;= 0) {
                                        /* temporary solution */
                                        /* no ammunition left, cannot engage */
                                        ds_list_clear(assignedSquad.coordinate_queue);
                                        engageSquad = noone;
                                        chaseTarget = assignedSquad;
                                        isEngaged = false;
                                        chaseTimer = 0;
                                        assignedSquad.canEngage = false;
                                        assignedSquad.isEngaged = false;
                                        assignedSquad.planesLanding = true;
                                        with(assignedSquad) {
                                            print("no ammo, returning");
                                            landSquad();
                                        }
                                    }
                                }
                                break;
                        }
                    }
                    else {
                        /* no ammunition left, disengage and return to takeoff point*/
                        ds_list_clear(assignedSquad.coordinate_queue);
                        engageSquad = noone;
                        chaseTarget = assignedSquad;
                        isEngaged = false;
                        chaseTimer = 0;
                        assignedSquad.canEngage = false;
                        assignedSquad.isEngaged = false;
                        assignedSquad.planesLanding = true;
                        with(assignedSquad) {
                            print("no ammo, returning");
                            landSquad();
                        }
                    }
                //}
            }
            turnRate = angle_difference(desiredAngle,direction); //engaged direction
            /* plane is engaging */
            if (instance_exists(engageSquad) &amp;&amp; instance_exists(assignedSquad)) {
                if (combatRole == 0) {
                    if (distance_to_object(assignedSquad) &gt; assignedSquad.baseEngageRange) {
                        //return to inital contact position
                        chaseTarget = assignedSquad;
                    }
                    else {
                        chaseTarget = engageSquad.squadMember[| irandom(ds_list_size(engageSquad.squadMember)-1)];
                        moveSpeed = lerp(min(moveSpeed,chaseTarget.moveSpeed),max(moveSpeed,chaseTarget.moveSpeed),0.5);
                    }
                }
            }
            else {
                chaseTarget = undefined;
            }
        }
        else {
            /* target destroyed, seeking different target */
            if (instance_exists(engageSquad)) {
                if (combatRole == 0) {
                    chaseTarget = engageSquad.squadMember[| irandom(ds_list_size(engageSquad.squadMember)-1)];
                }
            }
            else {
                /* enemy squad destroyed, return to normal behavior */
                engageSquad = noone;
                chaseTarget = assignedSquad;
                assignedSquad.isEngaged = false;
                print("target destroyed");
                isEngaged = false;
                chaseTimer = 0;
            }
        }
        /*var maxTurnRate = 1.5;
        if (isEngaged) {minTurnRate = 1;}
        turnRate = max(-maxTurnRate,min(maxTurnRate,turnRate/30)); // increase turn*/
        if (combatRole != 0) {
            moveSpeed = baseMoveSpeed*0.5;
        }
    }
    else {
        chaseTarget = assignedSquad;
        //setting up flight formation
        var xx = assignedSquad.x;
        var yy = assignedSquad.y;
        var idling_dist = point_distance(xx,yy,xx+idling_x,yy+idling_y);
        var idling_dir = point_direction(xx,yy,xx+idling_x,yy+idling_y)+assignedSquad.direction;
        var dirToIdlingPos = point_direction(x,y,xx+lengthdir_x(idling_dist,idling_dir),yy+lengthdir_y(idling_dist,idling_dir));
        var distToIdlingPos = point_distance(x,y,xx+lengthdir_x(idling_dist,idling_dir),yy+lengthdir_y(idling_dist,idling_dir));
        turnRate = angle_difference(dirToIdlingPos,direction);
        if (distToIdlingPos &lt; turnary(assignedSquad.isIdling,256,32)) {//if (distance_to_object(assignedSquad) &lt; assignedSquad.baseEngageRange/5) {
            turnRate = angle_difference(assignedSquad.direction,direction);
            withinSquadRange = true;
        }
        if (withinSquadRange) {
            moveSpeed = assignedSquad.speed;
        }
        else {
            addTurnRate = 4;
            moveSpeed = baseMoveSpeed*0.75;
        }
    }
    if (fire &lt;= 0) {fire++;}
    planeImageIndex = clamp(round(-(turnRate)+(image_number/2)),0,image_number-2);
    speed = var_wipe(speed,moveSpeed,100,0,0.05);
    direction += sign(turnRate)*turnRateCof*addTurnRate;
}
else {
    if (takeOff) {
        if (!instance_exists(takeOffFrom)) {
            instance_destroy();
        }
        else {
            direction = takeOffFrom.direction;
            speed = var_wipe(speed,5,100,0,0.01);
            planeImageIndex = image_number/2;
            if (!place_meeting(x,y,takeOffFrom)) {
                image_xscale = var_wipe(image_xscale,1,100,0.1,0);
                image_yscale = var_wipe(image_yscale,1,100,0.1,0);
                if ((image_xscale &gt;= 1) &amp;&amp; (image_yscale &gt;= 1)) {
                    /* plane has took off */
                    image_xscale = 1;
                    image_yscale = 1;
                    takeOff = false;
                }
            }
        }
    }
    if (landing) {
        if (!instance_exists(takeOffFrom)) {
            dest_x = x;
            dest_y = y;
            alarm[0] = -2;
            landing = false;
        }
        else {
            var angle = angle_difference(point_direction(x,y,assignedSquad.x,assignedSquad.y),direction)/40;
            if (isLandingInProgress) {
                angle = angle_difference(point_direction(x,y,takeOffFrom.x,takeOffFrom.y),direction)/20;
                if (place_meeting(x,y,takeOffFrom)) {
                    angle = angle_difference(takeOffFrom.direction,direction)/20;
                    speed = var_wipe(speed,0,100,0,0.02);
                    image_xscale = var_wipe(image_xscale,0.5,100,0.1,0);
                    image_yscale = var_wipe(image_yscale,0.5,100,0.1,0);
                    if ((image_xscale &lt;= 0.5) &amp;&amp; (image_yscale &lt;= 0.5)) {
                        image_xscale = 0.5;
                        image_yscale = 0.5;
                    }
                    if (speed == 0) {
                        /* plane has landed */
                        instance_destroy();
                    }
                }
                else {
                    speed = var_wipe(speed,moveSpeed*0.7,100,0,0.01);
                }
            }
            else {
                if (distance_to_object(assignedSquad) &lt; 96) {
                    angle = angle_difference(point_direction(x,y,takeOffFrom.x,takeOffFrom.y),direction)/20;
                    isLandingInProgress = true;
                }
            }
            direction += angle;
        }
    }
}
image_angle = direction;
image_index = var_wipe(image_index,planeImageIndex,100,0,0.1);
propellerIndex = (++propellerIndex) mod 4;
if (!canMove) {speed = 0;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!other.isBomb &amp;&amp; !other.isTorp) {
    if (other.shotFrom.isAlly != isAlly) {
        if (irandom(99) &lt; 95) {
            damage = other.damage;
            hp -= damage;
            instance_destroy(other);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
var dist = point_distance(x,y,x+(7*image_xscale),y);
var dir = image_angle+point_direction(x,y,x+7,y);
draw_sprite_ext(spr_propeller,propellerIndex,x+lengthdir_x(dist,dir),y+lengthdir_y(dist,dir),image_xscale,image_yscale,image_angle,white,1);
/*var xx = assignedSquad.x;
var yy = assignedSquad.y;
var idling_dist = point_distance(xx,yy,xx+idling_x,yy+idling_y);
var idling_dir = point_direction(xx,yy,xx+idling_x,yy+idling_y)+assignedSquad.direction;
var dirToIdlingPos = point_direction(x,y,xx+lengthdir_x(idling_dist,idling_dir),yy+lengthdir_y(idling_dist,idling_dir));
var distToIdlingPos = point_distance(x,y,xx+lengthdir_x(idling_dist,idling_dir),yy+lengthdir_y(idling_dist,idling_dir));
draw_circle(xx+lengthdir_x(idling_dist,idling_dir),yy+lengthdir_y(idling_dist,idling_dir),turnary(assignedSquad.isIdling,256,32),true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
