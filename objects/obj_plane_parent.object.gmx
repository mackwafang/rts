<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canMove = true;
canShoot = true;
isAlly = true;
takeOff = false; // plane is attempting taking off
landing = false; // plane is attempting to land
isLandingInProgress = false; // plane is in process of landing
takeOffFrom = noone;

baseMoveSpeed = 4;
moveSpeed = 4;
turnRateCof = 1; //turn rate coefficient
fireRate = 7; //fire rate
maxhp = 60;
hp = maxhp;
attack = 10;

chaseTarget = undefined; //object for go after
assignedSquad = undefined; //the assigned squad (object id)
isEngaged = false; //is plane engaged in combat
engagedSquad = undefined; // the squad that is engaged
maxEngageRange = 256; // must engage within this range
chaseTimer = 0;
maxChaseTimer = 3*60;

fovRange = 256;
fovAngle = 10;
idleSide = 1; //the side to go when plane is idling

propellerIndex = 0;
fire = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
if (hp &lt; maxhp*0.4) {
    hp -= (maxhp*0.001);
    part_particles_create(global.fireParticleSystem,x+irandom_range(-1,1),y+irandom_range(-1,1),global.fireParticleType,2);
}
/* dies */
if (hp &lt;= 0) {
    explosionEffect();
    instance_destroy();
}
/* chasing target */
var turnRate = 0;
if ((!takeOff &amp;&amp; !landing)) {
    if (chaseTarget != undefined) {
        if (instance_exists(chaseTarget)) {
            var anyEnemy = collision_line(x,y,x+lengthdir_x(fovRange,direction),y+lengthdir_y(fovRange,direction),obj_plane_parent,false,false);
            var foundAnyEnemy = false;
            if (anyEnemy != noone) {
                if (anyEnemy.isAlly != isAlly) {
                    foundAnyEnemy = true;
                }
            }
            if (inViewRangeAny(chaseTarget,fovAngle,fovRange)) {
                /* shoot when in range */
                if (chaseTarget.object_index != obj_squad) {
                    chaseTimer = 0;
                    if (assignedSquad.ammo &gt; 0) {
                        if (fire &gt; 0) {
                            fire -= fireRate;
                            assignedSquad.ammo -= 2;
                            var dist = point_distance(x,y,x,y+6);
                            var dir = image_angle+point_direction(x,y,x,y+6);
                            shootBullet(x+lengthdir_x(dist,dir),y+lengthdir_y(dist,dir),20,direction,attack);
                            
                            var dist = point_distance(x,y,x,y-6);
                            var dir = image_angle+point_direction(x,y,x,y-6);
                            shootBullet(x+lengthdir_x(dist,dir),y+lengthdir_y(dist,dir),20,direction,attack);
                        }
                    }
                    else {
                        /* no ammunition left, cannot engage */
                        print(string(id)+" returning");
                        ds_list_clear(assignedSquad.coordinate_queue);
                        engagedSquad = undefined;
                        chaseTarget = assignedSquad;
                        isEngaged = false;
                        chaseTimer = 0;
                        assignedSquad.canEngage = false;
                        assignedSquad.isEngaged = false;
                        assignedSquad.planesLanding = true;
                        assignedSquad.dest_x = takeOffFrom.x+lengthdir_x(-256,takeOffFrom.direction);
                        assignedSquad.dest_y = takeOffFrom.y+lengthdir_y(-256,takeOffFrom.direction);
                    }
                }
            }
            turnRate = angle_difference(point_direction(x,y,chaseTarget.x,chaseTarget.y),direction);
            if (isEngaged) {
                if (distance_to_object(assignedSquad) &lt; assignedSquad.baseEngageRange) {
                    /* turn towards enemy */
                    if (chaseTarget.object_index != obj_squad) {
                        //turnRate *= 2;
                        if (++chaseTimer &gt;= maxChaseTimer) {
                            /* choose different target */
                            chaseTarget = engagedSquad.squadMember[irandom(engagedSquad.squadSize-1)];
                        }
                    }
                    else {
                        /* enemy squad destroyed */
                        engagedSquad = undefined;
                        chaseTarget = assignedSquad;
                        assignedSquad.isEngaged = false;
                        isEngaged = false;
                        chaseTimer = 0;
                    }
                }
                else {
                    //return to inital contact position
                    chaseTarget = assignedSquad;
                }
            }
            else {
                // idling around requested location
                if (distance_to_object(assignedSquad) &lt; assignedSquad.baseEngageRange/4) {
                    if (irandom(200)) {idleSide *= -1;}
                    turnRate = angle_difference(point_direction(x,y,chaseTarget.x,chaseTarget.y)+(90*idleSide),direction);
                }
            }
        }
        else {
            /* target destroyed */
            if (isEngaged) {
                /* seeking different target */
                if (instance_exists(engagedSquad)) {
                    chaseTarget = engagedSquad.squadMember[irandom(engagedSquad.squadSize-1)];
                }
                else {
                    /* enemy squad destroyed */
                    engagedSquad = undefined;
                    chaseTarget = assignedSquad;
                    assignedSquad.isEngaged = false;
                    isEngaged = false;
                    chaseTimer = 0;
                }
            }
        }
    }
    if (isEngaged) {
        var maxTurnRate = 1.5;
        //if (isEngaged) {minTurnRate = 1;}
        turnRate = max(-maxTurnRate,min(maxTurnRate,turnRate/50));
    }
    else {
        turnRate = sign(turnRate);
    }
    if (isEngaged) {moveSpeed = baseMoveSpeed;} else {moveSpeed = baseMoveSpeed*0.5;}
    if (fire &lt;= 0) {fire++;}
    image_index = clamp(-(turnRate*4)+15,0,image_number-1);
    speed = var_wipe(speed,moveSpeed,200,0,0.1);
    direction += turnRate*turnRateCof;
}
else {
    if (takeOff) {
        direction = takeOffFrom.direction;
        speed = var_wipe(speed,5,100,0,0.01);
        image_index = 15;
        if (!place_meeting(x,y,takeOffFrom)) {
            image_xscale = var_wipe(image_xscale,1,100,0.1,0);
            image_yscale = var_wipe(image_yscale,1,100,0.1,0);
            if ((image_xscale &gt;= 1) &amp;&amp; (image_yscale &gt;= 1)) {
                /* plane has took off */
                image_xscale = 1;
                image_yscale = 1;
                takeOff = false;
            }
        }
    }
    if (landing) {
        var angle = angle_difference(point_direction(x,y,assignedSquad.x,assignedSquad.y),direction)/40;
        if (isLandingInProgress) {
            angle = angle_difference(point_direction(x,y,takeOffFrom.x,takeOffFrom.y),direction)/20;
            if (place_meeting(x,y,takeOffFrom)) {
                angle = angle_difference(takeOffFrom.direction,direction)/20;
                speed = var_wipe(speed,0,100,0,0.01);
                image_xscale = var_wipe(image_xscale,0.5,100,0.1,0);
                image_yscale = var_wipe(image_yscale,0.5,100,0.1,0);
                if ((image_xscale &lt;= 0.5) &amp;&amp; (image_yscale &lt;= 0.5)) {
                    image_xscale = 1;
                    image_yscale = 1;
                }
                if (speed == 0) {
                    /* plane has landed */
                    instance_destroy();
                }
            }
            else {
                speed = var_wipe(speed,moveSpeed*0.7,100,0,0.01);
            }
        }
        else {
            if (distance_to_object(assignedSquad) &lt; 48) {
                angle = angle_difference(point_direction(x,y,takeOffFrom.x,takeOffFrom.y),direction)/20;
                isLandingInProgress = true;
            }
        }
        direction += angle;
    }
}
image_angle = direction;
propellerIndex = (++propellerIndex) mod 4;
if (!canMove) {speed = 0;}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (other.shotFrom.isAlly != isAlly) {
    if (irandom(99) &lt; 95) {
        hp -= other.damage;
        instance_destroy(other);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
var dist = point_distance(x,y,x+(7*image_xscale),y);
var dir = image_angle+point_direction(x,y,x+7,y);
draw_sprite_ext(spr_propeller,propellerIndex,x+lengthdir_x(dist,dir),y+lengthdir_y(dist,dir),image_xscale,image_yscale,image_angle,white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
