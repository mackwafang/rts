<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_target_icon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>99999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>radius = 256;
isNeutral = true;
isAlly = false;
captureTime = 0;
maxCaptureTime = radius/2*100;
alliesInRange = 0;
enemiesInRange = 0;
isCapturing = false;
zoneName = string(instance_number(obj_capture_zone));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (var i = 0; i &lt; instance_number(obj_plane_parent); i++) {
    var o = instance_find(obj_plane_parent,i);
    if (distance_to_object(o) &lt;= radius) {
        if (o.isAlly) {
            alliesInRange++;
        }
        else {
            enemiesInRange++;
        }
    }
}
if (isNeutral ||(isAlly &amp;&amp; (alliesInRange &gt; 0)) || (!isAlly &amp;&amp; (enemiesInRange &gt; 0))) {
    isCapturing = true;
}
if ((isCapturing) &amp;&amp;(alliesInRange != enemiesInRange)) {
    /* capture the objective */
    var lastCaptureTime = captureTime;
    captureTime += alliesInRange-enemiesInRange;
    /* set zone to neutral if current force lost this zone*/
    if (sign(captureTime) != sign(lastCaptureTime)) {isNeutral = true;}
    /* change objective status depending on aircraft's alliance */
    if (alliesInRange &gt; enemiesInRange) {
        if (captureTime &gt;= maxCaptureTime) {
            isAlly = true;
            isNeutral = false;
        }
    }
    else if (alliesInRange &lt; enemiesInRange) {
        if (captureTime &lt;= -maxCaptureTime) {
            isAlly = false;
            isNeutral = false;
        }
    }
}
else if (!isCapturing) {
    /* removes capture points when no squad is capturing*/
    captureTime = var_wipe(captureTime,0,100,0,1);
}
captureTime = clamp(captureTime,-maxCaptureTime,maxCaptureTime);
alliesInRange = 0;
enemiesInRange = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var totalDeg = 360;
var feq = 5;//lower feq = less draw
var drawAmount = totalDeg/feq
var zoneWidth = 6;
for (var i = 0; i &lt; drawAmount; i++) {
    var x1 = x+lengthdir_x(radius,i*feq);
    var x2 = x+lengthdir_x(radius,(i+1)*feq);
    var y1 = y+lengthdir_y(radius,i*feq);
    var y2 = y+lengthdir_y(radius,(i+1)*feq);
    var color = $AAAAAA;
    var val = floor((abs(captureTime)/maxCaptureTime)*drawAmount);
    if (i &lt;= val) {
        if (sign(captureTime) == 1) {
            color = green;
        }
        else if (sign(captureTime) == -1) {
            color = red;
        }
    }
    draw_line_width_colour(x1,y1,x2,y2,zoneWidth,color,color);
}
if (!isNeutral) {
    var c = turnary(isAlly,green,red);
    draw_set_alpha(0.25);
    draw_circle_colour(x,y,radius,c,c,false);
    draw_set_alpha(1);
}
draw_text(x,y,string(captureTime));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
