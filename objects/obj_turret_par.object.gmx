<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rotateSpd = 1; //gun rotation speed
gunAngle = 0;
fireRate = 0; //higher is slower
isAlly = true;
fire = 0;
attack = 1; //attack against enemy
defence = 1; //defence against enemy
accuracy = 10; //lower = more accurate
hp = 1; //durability 
maxRepairTime = 300; //time until turret is usable
isAA = false;
repairTime = 0;
maxReloadTime = 10;
reloadTime = 0;
range = 256; //in pixel
target = noone;
isSelected = false;
numberOfGuns = 1;
gunOffset[0] = 0;
gunOffset[1] = 0;
gunOffset[2] = 0;
gunOffset[3] = 0;
gunOffset[4] = 0;
gunOffset[5] = 0;
gunOffset[6] = 0;
gunOffset[7] = 0;
image_speed = 0;


healthUpgrade = 0;
attackUpgrade = 1;
defenceUpgrade = 2;
accuracyUpgrade = 3;
rotateUpgrade = 4;
reloadUpgrade = 5;
firerateUpgrade = 6;


gunFireSystem = part_system_create();
gunFireType = part_type_create();
gunSmokeSystem = part_system_create();
gunSmokeType = part_type_create();
part_system_depth(gunFireSystem,depth);
part_system_depth(gunSmokeSystem,depth+1);

part_type_sprite(gunFireType,spr_bullet,false,true,false);
part_type_scale(gunFireType,1,1);
part_type_size(gunFireType,1,2,0.1,0);
part_type_speed(gunFireType,0.3,1,-0.01,0);
part_type_orientation(gunFireType,0,360,1,0,0);
part_type_life(gunFireType,15,15);
part_type_alpha2(gunFireType,1,0);
part_type_colour2(gunFireType,yellow,orange);

part_type_sprite(gunSmokeType,spr_bullet,false,true,false);
part_type_scale(gunSmokeType,1,1);
part_type_size(gunSmokeType,1,2,0.1,0);
part_type_speed(gunSmokeType,0.3,1,-0.01,0);
part_type_orientation(gunSmokeType,0,360,1,0,0);
part_type_life(gunSmokeType,90,90);
part_type_alpha2(gunSmokeType,1,0);
part_type_colour1(gunSmokeType,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>part_type_destroy(gunFireType);
part_system_destroy(gunFireSystem);
part_type_destroy(gunSmokeType);
part_system_destroy(gunSmokeSystem);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var turning = false;
/* find enemy aircraft */
var dist = power(2,31);
for (var i = 0; i &lt; instance_number(obj_plane_parent); i++) {
    var s = instance_find(obj_plane_parent,i);
    if (s.isAlly != isAlly) {
        if (distance_to_object(s) &lt; dist) {
            dist = distance_to_object(s);
            target = s;
        }
    }
}
if (target != noone) {
    if (instance_exists(target)) {
        var targetDistance = point_distance(x,y,target.x,target.y);
        if (targetDistance &lt; range) {
            //var targetAngle = point_direction(x,y,target.x+lengthdir_x(target.speed*15,point_direction(target.x,target.y,target.to_x,target.to_y)),target.y+lengthdir_y(target.speed*15,point_direction(target.x,target.y,target.to_x,target.to_y)));
            var targetAngle = predictedAim(gunAngle,target,attack+10);//point_direction(x,y,target.x,target.y);
            var gunAngleDiff = angle_difference(targetAngle,gunAngle);
            if (abs(round(gunAngleDiff)) &gt;= irandom(accuracy)+1) { //allows +/- 2 degree to fire
                gunAngle += sign(gunAngleDiff)*rotateSpd;
            }
            else {
                //fire
                if (fire &gt;= 0 &amp;&amp; reloadTime &lt;= 0) {
                    fire -= fireRate;
                    reloadTime = maxReloadTime;
                    if (accuracy &gt; 2) {accuracy--;}
                    for (var i = 0; i &lt; numberOfGuns; i++) {
                        var x_to = gunOffset[i*2];
                        var y_to = gunOffset[(i*2)+1];
                        var xx = x+lengthdir_x(point_distance(x,y,x+x_to,y+y_to),gunAngle+point_direction(x,y,x+x_to,y+y_to));
                        var yy = y+lengthdir_y(point_distance(x,y,x+x_to,y+y_to),gunAngle+point_direction(x,y,x+x_to,y+y_to));
                        part_type_direction(gunFireType,gunAngle-15,gunAngle+15,0,0);
                        part_type_direction(gunSmokeType,gunAngle-15,gunAngle+15,0,0);
                        if (!isAA) {
                            part_particles_create(gunSmokeSystem,xx,yy,gunSmokeType,20);
                            part_particles_create(gunFireSystem,xx,yy,gunFireType,20);
                        }
                        //fireShell(xx,yy,attack+10,gunAngle,attack);
                        shootBullet(xx,yy,attack+10,gunAngle+irandom_range(-accuracy,accuracy),attack,range/(60*(attack+10)));
                    }
                }
            }
        }
        else {
            accuracy = 10;
        }
    }
}
/* Select gun */
if (inSquare(mouse_x,mouse_y,x-8,y-8,x+8,y+8,mouse_check_button_pressed(mb_left))) {
    obj_control.selectedGun = self;
    isSelected = !isSelected;
    for (var i = 0; i &lt; instance_number(obj_turret_par); i++) {
        var o = instance_find(obj_turret_par,i);
        if (o != self) {
            o.isSelected = false;
        }
    }
}
if (reloadTime &gt; 0) {
    reloadTime -= 1/max(1,room_speed);
}
image_index = -fire;
if (fire &lt; 0) {fire++;}

/* Upgrade variables checksum */

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprite_index,image_index,x,y,image_xscale,image_yscale,gunAngle,c_white,1);
if (inSquare(mouse_x,mouse_y,x-8,y-8,x+8,y+8) || isSelected) {
    draw_circle_colour(x,y,range,0,0,true);
    if ((target != noone) &amp;&amp; (distance_to_object(target) &lt; range)) {
        var targetAngle = point_direction(x,y,target.x,target.y);
        var targetDist = point_distance(x,y,target.x,target.y);
        draw_line_colour(x,y,x+lengthdir_x(targetDist,targetAngle),y+lengthdir_y(targetDist,targetAngle),0,0);
        draw_line_colour(x,y,x+lengthdir_x(targetDist,gunAngle),y+lengthdir_y(targetDist,gunAngle),c_red,c_red);
        draw_text_colour(x,y-8,string(angle_difference(targetAngle,gunAngle))+"#"+string(reloadTime),c_white,c_white,c_white,c_white,1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
